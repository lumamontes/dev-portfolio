---
import Layout from '../../layouts/Layout.astro';
import { getLangFromUrl, useTranslations } from '../../utils/lang';
import { languages } from '../../data/ui';
import presentation from '../../data/presentation';
import SocialLinkCard from '@/components/SocialLinkCard.astro';

export function getStaticPaths() {
  return Object.keys(languages).map((lang) => ({ params: { lang } }));
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const socialLinks = presentation.socials.map(social => ({
  name: social.label,
  url: social.link,
  icon: social.label === 'Email' ? 'üìß' : social.label === 'Linkedin' ? 'üíº' : 'üêô'
}));

const responseTime = '< 24h';
---

<Layout title={t('nav.contact')} description={t('contact.description')}>
  <!-- Background Effects -->
  <div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="absolute inset-0 bg-gradient-to-br from-slate-900 via-zinc-900 to-black"></div>
    <div class="absolute inset-0 bg-[radial-gradient(circle_at_70%_30%,rgba(16,185,129,0.05),transparent_50%)]"></div>
    <div class="absolute inset-0 bg-[radial-gradient(circle_at_30%_70%,rgba(59,130,246,0.05),transparent_50%)]"></div>
    <div class="scanlines"></div>
  </div>

  <div class="relative z-10">
    <!-- Hero Section -->
    <header class="pb-12 border-b border-zinc-800/50 text-center">
      <div class="flex items-center justify-center gap-3 mb-6">
        <h1 class="text-4xl md:text-5xl font-bold text-white tracking-tight">
          {t('nav.contact')} ü§ù
        </h1>
      </div>
      
      <p class="text-lg text-zinc-300 max-w-3xl mx-auto mb-8 leading-relaxed">
        {t('contact.description')}
      </p>

      <div class="flex items-center justify-center gap-6 text-sm">
        <div class="flex items-center gap-2">
          <span class="text-emerald-400">‚ö°</span>
          <span class="text-zinc-400">{t('contact.responseTime')}: {responseTime}</span>
        </div>
        <span class="text-zinc-600">‚Ä¢</span>
        <div class="flex items-center gap-2">
          <span class="text-blue-400">üåç</span>
          <span class="text-zinc-400">{t('contact.remoteWorldwide')}</span>
        </div>
      </div>
    </header>

    <section class="py-12 flex-1">
      <div class="max-w-2xl mx-auto">
        <div class="grid grid-cols-1 gap-12">
          <div class="space-y-8">
            <div>
              <h2 class="text-2xl font-bold text-white mb-6">{t('contact.social.title')}</h2>
              <div class="space-y-4">
                {socialLinks.map((link, index) => (
                  <SocialLinkCard link={link.url} icon={link.icon} name={link.name} index={index} />
                ))}
              </div>
            </div>

            <div class="bg-zinc-900/30 rounded-xl border border-zinc-800/50 p-6 backdrop-blur-sm">
              <h3 class="text-lg font-medium text-white mb-4">{t('contact.quickInfo')}</h3>
              <div class="space-y-3 text-sm">
                <div class="flex items-center justify-between">
                  <span class="text-zinc-400">{t('contact.location')}</span>
                  <span class="text-zinc-200">{t('contact.locationValue')}</span>
                </div>
                <div class="flex items-center justify-between">
                  <span class="text-zinc-400">{t('contact.responseTime')}</span>
                  <span class="text-emerald-400">{responseTime}</span>
                </div>
                <div class="flex items-center justify-between">
                  <span class="text-zinc-400">{t('contact.languages')}</span>
                  <span class="text-zinc-200">{t('contact.languagesValue')}</span>
                </div>
                <div class="flex items-center justify-between">
                  <span class="text-zinc-400">{t('contact.availability')}</span>
                  <span class="text-green-400">{t('contact.availabilityValue')}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </div>
</Layout>

<style>
  /* Background effects */
  .scanlines {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: repeating-linear-gradient(
      0deg,
      transparent,
      transparent 2px,
      rgba(255, 255, 255, 0.01) 2px,
      rgba(255, 255, 255, 0.01) 4px
    );
    pointer-events: none;
    opacity: 0.5;
  }

  /* Form enhancements */
  .form-group input:focus,
  .form-group textarea:focus,
  .form-group select:focus {
    box-shadow: 0 0 0 1px rgba(52, 211, 153, 0.2);
  }

  .form-group input:invalid:not(:focus):not(:placeholder-shown),
  .form-group textarea:invalid:not(:focus):not(:placeholder-shown) {
    border-color: rgba(239, 68, 68, 0.5);
  }

  .form-group input:valid:not(:focus):not(:placeholder-shown),
  .form-group textarea:valid:not(:focus):not(:placeholder-shown) {
    border-color: rgba(34, 197, 94, 0.3);
  }

  /* Pulse animation */
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  /* Custom scrollbar */
  :global(::-webkit-scrollbar) {
    width: 8px;
  }

  :global(::-webkit-scrollbar-track) {
    background: rgba(0, 0, 0, 0.1);
  }

  :global(::-webkit-scrollbar-thumb) {
    background: linear-gradient(to bottom, rgba(52, 211, 153, 0.3), rgba(59, 130, 246, 0.3));
    border-radius: 4px;
  }

  :global(::-webkit-scrollbar-thumb:hover) {
    background: linear-gradient(to bottom, rgba(52, 211, 153, 0.5), rgba(59, 130, 246, 0.5));
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .grid-cols-1.md\\:grid-cols-2 {
      grid-template-columns: 1fr;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .scanlines {
      display: none;
    }
    
    .animate-pulse {
      animation: none;
    }
    
    * {
      transition: none !important;
      animation: none !important;
    }
  }
</style>