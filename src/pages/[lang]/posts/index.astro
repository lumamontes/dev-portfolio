---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import formatDate from "@/utils/formatDate";
import { getLangFromUrl, getSlugFromUrl, useTranslations } from "@/utils/lang";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

export function getStaticPaths() {
  return [{ params: { lang: "en" } }, { params: { lang: "br" } }];
}

const allPosts = await getCollection("posts", ({ id }) => {
  return id.startsWith(`${lang}/`);
});

const posts = allPosts.sort((a, b) => 
  new Date(b.data.publishedAt).getTime() - new Date(a.data.publishedAt).getTime()
);

const postsByYear = posts.reduce((acc, post) => {
  const year = new Date(post.data.publishedAt).getFullYear();
  if (!acc[year]) acc[year] = [];
  acc[year].push(post);
  return acc;
}, {} as Record<number, typeof posts>);

---

<Layout 
  title={`${t('nav.blog')} - Luma Montes`} 
  description="Explore my latest thoughts on web development, design, technology, and creative coding."
>
  <div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="absolute inset-0 bg-gradient-to-br from-slate-900 via-zinc-900 to-black"></div>
    <div class="absolute inset-0 bg-[radial-gradient(circle_at_30%_80%,rgba(34,197,94,0.05),transparent_50%)]"></div>
    <div class="scanlines"></div>
  </div>

  <div class="relative z-10">
    <header class="pb-12 border-b border-zinc-800/50">
      <div class="flex flex-col lg:flex-row items-start gap-8">
        <div class="flex-1">
          <div class="flex items-center gap-4 mb-6">
            <div>
              <h1 class="text-4xl md:text-5xl font-bold text-white mb-2 tracking-tight">
                {t('nav.blog')}
              </h1>
            </div>
          </div>
          
          <p class="text-lg text-zinc-300 leading-relaxed max-w-3xl">
            {t('blog.description')}
          </p>
        </div>
      </div>
    </header>

    <section class="py-8 space-y-12">
      {Object.entries(postsByYear)
        .sort(([a], [b]) => parseInt(b) - parseInt(a))
        .map(([year, yearPosts]) => (
          <div class="year-section" data-year={year}>
            <div class="flex items-center gap-4 mb-8">
              <div class="flex items-center gap-3">
                <h2 class="text-xl font-bold text-white font-mono">{year}</h2>
              </div>
              <div class="flex-1 h-px bg-gradient-to-r from-zinc-800 to-transparent"></div>
              <div class="text-xs text-zinc-500 font-mono">
                {yearPosts.length} {yearPosts.length === 1 ? 'post' : 'posts'}
              </div>
            </div>

            <div class="space-y-6">
              {yearPosts.map((post, index) => (
                <article 
                  class="post-item group relative"
                >
                  <a
                    href={`/${lang}/posts/${getSlugFromUrl(post.slug)}`}
                    class="block p-6 bg-zinc-900/30 rounded-lg border border-zinc-800/50 backdrop-blur-sm transition-all duration-300 hover:bg-zinc-900/50 hover:border-emerald-400/30 hover:shadow-lg hover:shadow-emerald-400/5"
                  >
                    <div class="flex items-start justify-between mb-4">
                      <div class="flex-1">
                        <h3 class="text-lg font-medium text-white group-hover:text-emerald-300 transition-colors line-clamp-2">
                          {post.data.title}
                        </h3>
                        
                        <div class="flex items-center gap-4 mt-2 text-xs text-zinc-500">
                          <time class="font-mono">
                            {formatDate(post.data.publishedAt)}
                          </time>
                        </div>
                      </div>

                      <div class="ml-4 opacity-60 group-hover:opacity-100 group-hover:translate-x-1 transition-all">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" class="text-emerald-400">
                          <path d="M7 17L17 7" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                          <path d="M7 7h10v10" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                        </svg>
                      </div>
                    </div>
                    <p class="text-sm text-zinc-400 leading-relaxed line-clamp-2 group-hover:text-zinc-300 transition-colors">
                      {post.data.description}
                    </p>
                  </a>
                </article>
              ))}
            </div>
          </div>
        ))
      }
    </section>
  </div>
</Layout>

<style>
  .scanlines {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: repeating-linear-gradient(
      0deg,
      transparent,
      transparent 2px,
      rgba(255, 255, 255, 0.01) 2px,
      rgba(255, 255, 255, 0.01) 4px
    );
    pointer-events: none;
    opacity: 0.5;
  }

  .tag-filter {
    background: rgba(39, 39, 42, 0.5);
    border-color: rgba(113, 113, 122, 0.3);
    color: rgba(161, 161, 170, 1);
  }

  .tag-filter:hover {
    background: rgba(52, 211, 153, 0.1);
    border-color: rgba(52, 211, 153, 0.3);
    color: rgba(52, 211, 153, 1);
  }

  .tag-filter.active {
    background: rgba(52, 211, 153, 0.2);
    border-color: rgba(52, 211, 153, 0.5);
    color: rgba(52, 211, 153, 1);
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .post-item {
    transition: all 0.3s ease;
  }

  :global(::-webkit-scrollbar) {
    width: 8px;
  }

  :global(::-webkit-scrollbar-track) {
    background: rgba(0, 0, 0, 0.1);
  }

  :global(::-webkit-scrollbar-thumb) {
    background: rgba(52, 211, 153, 0.3);
    border-radius: 4px;
  }

  :global(::-webkit-scrollbar-thumb:hover) {
    background: rgba(52, 211, 153, 0.5);
  }

  @media (max-width: 640px) {
    .post-item a {
      padding: 1rem;
    }
    
    h1 {
      font-size: 1.75rem;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .scanlines {
      display: none;
    }
    
    * {
      transition: none !important;
      animation: none !important;
    }
  }
</style>