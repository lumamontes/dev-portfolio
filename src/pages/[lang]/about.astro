---
import Layout from '../../layouts/Layout.astro';
import { getLangFromUrl, useTranslations } from '../../utils/lang';
import { languages, type Experience } from '../../data/ui';
import presentation from '../../data/presentation';
import { about, experiences } from '../../data/about';
import ExperienceCard from '@/components/ExperienceCard.astro';

export function getStaticPaths() {
  return Object.keys(languages).map((lang) => ({ params: { lang } }));
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const a = useTranslations(lang, about);
---

<Layout title={t('nav.about')} description={t('about.description')}>
  <!-- Background Effects -->
  <div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="absolute inset-0 bg-gradient-to-br from-slate-900 via-zinc-900 to-black"></div>
    <div class="absolute inset-0 bg-[radial-gradient(circle_at_20%_50%,rgba(34,197,94,0.05),transparent_50%)]"></div>
    <div class="absolute inset-0 bg-[radial-gradient(circle_at_80%_20%,rgba(59,130,246,0.05),transparent_50%)]"></div>
    <div class="scanlines"></div>
  </div>

  <main class="relative z-10 min-h-screen">
    <header class="px-4 py-12 border-b border-zinc-800/50">
      <div class="max-w-6xl mx-auto">
        <div class="flex flex-col lg:flex-row items-start gap-8">
          <div class="flex-1">
            <div class="flex items-center gap-4 mb-6">
              <div class="w-16 h-16 bg-gradient-to-br from-emerald-400 to-blue-500 rounded-xl flex items-center justify-center">
                 <img src="https://avatars.githubusercontent.com/u/60052718?v=4" alt="Luma Montes" class="w-16 h-16 rounded-xl" />
              </div>
              <div>
                <h1 class="text-4xl md:text-5xl font-bold text-white mb-2 tracking-tight">
                  {t('about.title')}
                </h1>
                <div class="flex items-center gap-3 text-sm text-zinc-400">
                  <span>{t('presentation.location')}</span>
                  <span>‚Ä¢</span>
                  <span>{t('presentation.experience')}</span>
                </div>
              </div>
            </div>
            
            <p class="text-lg text-zinc-300 leading-relaxed max-w-3xl">
              {t('about.description')}
            </p>
          </div>
        </div>
      </div>
    </header>

    <section class="px-4 py-12">
      <div class="max-w-6xl mx-auto space-y-16">
        
        <div>
          <div class="flex items-center gap-3 mb-8">
            <h2 class="text-3xl font-bold text-white">{a('skills.title')}</h2>
            <div class="flex-1 h-px bg-gradient-to-r from-emerald-500/50 to-transparent"></div>
            <span class="text-xs text-zinc-500 font-mono">{a('skills.subtitle')}</span>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div class="group bg-zinc-900/30 rounded-xl border border-zinc-800/50 p-6 backdrop-blur-sm hover:border-emerald-400/30 transition-all duration-300">
              <div class="flex items-center gap-3 mb-4">
                <div class="w-10 h-10 bg-emerald-400/20 rounded-lg flex items-center justify-center">
                  <span class="text-emerald-400 text-lg">üé®</span>
                </div>
                <h3 class="text-xl font-semibold text-emerald-400">{t('about.skills.frontend')}</h3>
              </div>
              <div class="space-y-3">
                {about[lang]['frontend.skills'].map((skill, index) => (
                  <div class="flex items-center justify-between group/skill">
                    <span class="text-zinc-300 group-hover/skill:text-emerald-300 transition-colors">{skill}</span>
                    <div class="flex gap-1">
                      {Array.from({length: 5}, (_, i) => (
                        <div class={`w-2 h-2 rounded-full ${i < (index % 3 + 3) ? 'bg-emerald-400' : 'bg-zinc-700'}`}></div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div class="group bg-zinc-900/30 rounded-xl border border-zinc-800/50 p-6 backdrop-blur-sm hover:border-blue-400/30 transition-all duration-300">
              <div class="flex items-center gap-3 mb-4">
                <div class="w-10 h-10 bg-blue-400/20 rounded-lg flex items-center justify-center">
                  <span class="text-blue-400 text-lg">‚öôÔ∏è</span>
                </div>
                <h3 class="text-xl font-semibold text-blue-400">{t('about.skills.backend')}</h3>
              </div>
              <div class="space-y-3">
                {about[lang]['backend.skills'].map((skill, index) => (
                  <div class="flex items-center justify-between group/skill">
                    <span class="text-zinc-300 group-hover/skill:text-blue-300 transition-colors">{skill}</span>
                    <div class="flex gap-1">
                      {Array.from({length: 5}, (_, i) => (
                        <div class={`w-2 h-2 rounded-full ${i < (index % 3 + 3) ? 'bg-blue-400' : 'bg-zinc-700'}`}></div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        <div>
          <div class="flex items-center gap-3 mb-8">
            <h2 class="text-3xl font-bold text-white">{t('experience.title')}</h2>
            <div class="flex-1 h-px bg-gradient-to-r from-blue-500/50 to-transparent"></div>
            <span class="text-xs text-zinc-500 font-mono">{t('experience.subtitle')}</span>
          </div>

          <div class="relative">
            <div class="absolute left-8 top-0 bottom-0 w-px bg-gradient-to-b from-emerald-400 via-blue-400 to-purple-400"></div>
            <div class="space-y-8">
               {experiences[lang].items.map((experience: Experience) => {
                return (
                  <ExperienceCard {...experience} />
                )
               })}
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>
</Layout>

<style>
  /* Background effects */
  .scanlines {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: repeating-linear-gradient(
      0deg,
      transparent,
      transparent 2px,
      rgba(255, 255, 255, 0.01) 2px,
      rgba(255, 255, 255, 0.01) 4px
    );
    pointer-events: none;
    opacity: 0.5;
  }

  /* Pulse animation */
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  /* Skill rating dots */
  .skill-rating {
    display: flex;
    gap: 2px;
  }

  /* Enhanced hover effects */
  .group:hover .group-hover\:scale-105 {
    transform: scale(1.05);
  }

  /* Timeline enhancements */
  .timeline-dot {
    position: relative;
  }

  .timeline-dot::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 20px;
    height: 20px;
    border: 2px solid currentColor;
    border-radius: 50%;
    background: transparent;
  }

  /* Custom scrollbar */
  :global(::-webkit-scrollbar) {
    width: 8px;
  }

  :global(::-webkit-scrollbar-track) {
    background: rgba(0, 0, 0, 0.1);
  }

  :global(::-webkit-scrollbar-thumb) {
    background: linear-gradient(to bottom, rgba(34, 197, 94, 0.3), rgba(59, 130, 246, 0.3));
    border-radius: 4px;
  }

  :global(::-webkit-scrollbar-thumb:hover) {
    background: linear-gradient(to bottom, rgba(34, 197, 94, 0.5), rgba(59, 130, 246, 0.5));
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .timeline-line {
      left: 2rem;
    }
    
    .timeline-item {
      margin-left: 1rem;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .scanlines {
      display: none;
    }
    
    .animate-pulse {
      animation: none;
    }
    
    * {
      transition: none !important;
      animation: none !important;
    }
  }

  /* Focus improvements */
  :global(:focus-visible) {
    outline: 2px solid rgba(34, 197, 94, 0.5);
    outline-offset: 2px;
    border-radius: 4px;
  }
</style>